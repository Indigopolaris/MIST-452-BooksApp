// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using books452.Data;

#nullable disable

namespace books452.Migrations
{
    [DbContext(typeof(BooksDBContext))]
    [Migration("20240209102418_addingBooksTableWithData")]
    partial class addingBooksTableWithData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("books452.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "David Grann",
                            BookTitle = "the Wager",
                            CategoryId = 1,
                            Description = "A tale of Shipwreck, mutiny, and murder",
                            Price = 19.99m
                        },
                        new
                        {
                            BookId = 2,
                            Author = "Amy McCulloch",
                            BookTitle = "Midnight",
                            CategoryId = 2,
                            Description = "In this pulse-pounding thriller, a once-in-a-lifetime trip to Antarctica",
                            Price = 15.99m
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Ray Naylor",
                            BookTitle = "The Tusks Of Extinction",
                            CategoryId = 3,
                            Description = "Moscow has resurrected the mammoth. But someone must teach them how to be mammoths, or they are doomed to die out again.",
                            Price = 25.99m
                        });
                });

            modelBuilder.Entity("books452.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "This is the description for the Travel category",
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "This is the description for the Fiction category",
                            Name = "Fiction"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "This is the description for the Technology category",
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("books452.Models.Book", b =>
                {
                    b.HasOne("books452.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });
#pragma warning restore 612, 618
        }
    }
}
